; ---------- Variables ----------
; Current Focused Workspace variable
; The workspace I'm curently looking at at any given time 
(defpoll focused_workspace :interval "350ms" "hyprctl monitors -j | jq '.[] | select(.focused) | .activeWorkspace.id'")
(defpoll act_workspaces :interval "350ms" "hyprctl workspaces -j | jq 'map({key: .id | tostring, value: .windows})'")

;; time variable
(defpoll time :interval "1s"
    `date +'{"hour":"%H","min":"%M","sec":"%S","day_str":"%a","day_num":"%d","month":"%b"}'`)

;; network connectivity variable
(defpoll net :interval "100s"
    :initial `N/a`
    `nmcli -terse -fields SIGNAL,ACTIVE device wifi \
  | awk --field-separator ':' '{if($2=="yes")print$1}'`)

; Battery levels variable, value is pulled by script
(defpoll battery :interval "15s" "$HOME/.config/eww/scripts/battery --bat")
(defpoll battery_status :interval "1s" "$HOME/.config/eww/scripts/battery --bat-st")
(defpoll battery_color :interval "1s" "$HOME/.config/eww/scripts/battery_color")

; How much memory is in use variable 
(defpoll memory :interval "15s" "scripts/memory")


; Volumne variable
(defpoll volume_percent :interval "3s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defvar vol_reveal false) ; controls the hidable menu for the volumne

; brightness variable
(defpoll brightness_percent :interval "5s" "brightnessctl -m -d amdgpu_bl2 | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defvar br_reveal false)

; wifi Variables
(defvar wifi_rev false) ; controls slider
(defpoll COL_WLAN :interval "1s" "$HOME/.config/eww/scripts/wifi --COL") ; Get status of Wifi, connected or disconnected
(defpoll ESSID_WLAN :interval "1s" "$HOME/.config/eww/scripts/wifi --ESSID") ; Get Wifi network name
(defpoll WLAN_ICON :interval "1s" "$HOME/.config/eww/scripts/wifi --ICON") ; Get icon that corresponds with status of network
(defpoll IP_ADDR :interval "1s" "$HOME/.config/eww/scripts/ip_address wlan0")
(defpoll TUN_IP_ADDR :interval "1s" "$HOME/.config/eww/scripts/ip_address tun0")

; bluetooth status variable
(defpoll BLUE_STATUS :interval "1s" "$HOME/.config/eww/scripts/bluetooth.sh")

(defpoll ALBUM_COVER :interval "1s" "$HOME/.config/eww/scripts/audio_metadata --album-artwork")
(defpoll SONG_TITLE :interval "1s" "$HOME/.config/eww/scripts/audio_metadata --track_name")
(defpoll ALBUM_TITLE :interval "1s" "$HOME/.config/eww/scripts/audio_metadata --album_name")
(defpoll ARTIST_NAME :interval "1s" "$HOME/.config/eww/scripts/audio_metadata --artist_name")

; execute eww variable
(defvar eww "/usr/bin/eww -c $HOME/.config/eww")

; --------- Windows that represents the container of the full bar 
(defwindow top-bar
            :monitor 0
            :geometry (geometry :x "0%"
                                :y "1%"
                                :width "99.3%"
                                :height "3%"
                                :anchor "top center")
            :stacking "fg"
            :exclusive true
(bar_layout))

(defwindow system
  :monitor 0
  :geometry (geometry 
                      :x "0.7%" 
                      :y "0.1%" 
                      :anchor "top right" 
                      :width "20%" 
                      :height "10%")
  (system)
  )

(defwindow ip_menu
  :monitor 0
  :geometry (geometry
              :x "3%"
              :y "0.1%"
              :anchor "top right"
              :width "20%"
              :height "10%"
              )
  (ip_menu)
)

(defwindow slider_menu
  :monitor 0 
  :geometry (geometry
              :x "1.5%"
              :y "0.1%"
              :anchor "top right"
              :width "20%"
              :height "10%"
              )
  (slider_menu)
)

(defwindow power_menu
  :monitor 0 
  :geometry (geometry
              :x "0.7%"
              :y "0.1%"
              :anchor "top right"
              :width "17%"
              :height "10%"
  )
  (power_menu)
)

(defwindow audio_menu
  :monitor 0 
  :geometry (geometry
              :x "0.7%"
              :y "0.1%"
              :anchor "top right"
              :width "17%"
              :height "10%"
              )
  (audio_menu)
  )

; ---------- the actual widget that holds the sub-widgets that make up the full bar ----------
(defwidget bar_layout []
    (box :class "full-bar"
    (left)
    (label :class "module-time" :text "${time.day_str} ${time.month} ${time.day_num} ${time.hour}:${time.min}:${time.sec}")
    ;(label :text "test")
    (right)
    )
)

; separator 
(defwidget sep []
  (box 
    :class "module-2" 
    :vexpand "false"
    :hexpand "false"
    (label
      :class "separ"
      :text "<")
  )
)

(defwidget start []
  (box
    :vexpand "false"
    :hexpand "false"
    (button 
      :class "start_icon"
      :onclick "$HOME/.config/eww/scripts/pop power_menu"
      ""
    )
  )
)

; ---------- Widgets on the right third of the bar ----------
(defwidget ip_addr []
  (box
    :vexpand "false"
    :hexpand "false"
    (label
      :class "ip_addr"
      :text "${IP_ADDR}"
      )
  )
)


;; The battery widget
(defwidget battery []
  (box :class "battery_module" :style "color: ${battery_color};" :vexpand "false" :hexpand "false"
    (circular-progress :value battery
      :thickness 3
      ;:style "color: ${battery_color};"
      (button 
        :class "baticon"
        :limit-width 2
        :tooltip "battery is on ${battery}%"
        :show_truncated false
        :onclick "$HOME/.config/eww/scripts/pop system"
        :wrap false
        ""
        ;"${battery}%"
        ;(label :text "${battery}%")
        ))))

(defwidget memory []
  (box :class "mem_module" :vexpand "false" :hexpand: "false"
  (circular-progress :value memory
    :thickness 3
    (button
      :class "memicon"
      :limit-width 2
      :tooltip "using ${memory}% RAM"
      ;:onclick "$HOME/.config/eww/scripts/pop system"
      :show_truncated false
      :wrap false
      ""
     ))))

(defwidget volume []
  (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3"
    (button 
      :onclick "scripts/pop slider_menu" 
      :class "volume_icon" 
      "")
  )
)

(defwidget bright []
  (box 
    :class "module-2" 
    :space-evenly "false"
    :orientation "h"
    :spacing "3"
    (button
      :onclick "scripts/pop slider_menu"
      :class "bright_icon"
      ""
      )
    )
  )

;(defwidget volume []
  ;(eventbox :onhover "${eww} update vol_reveal=true"
    ;:onhoverlost "${eww} update vol_reveal=false"
    ;(box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3"
      ;(button 
        ;:onclick "scripts/pop slider_menu" 
        ;:class "volume_icon" 
        ;"")
      ;(revealer :transition "slideleft"
        ;:reveal vol_reveal
        ;:duration "350ms"
        ;(scale :class "volbar"
          ;:value volume_percent
          ;:orientation "h"
          ;:tooltip "${volume_percent}%"
          ;:max 100
          ;:min 0
          ;:onchange "amixer -D pulse sset Master {}%")
        ;)
      ;)
    ;)
  ;)

;(defwidget bright []
  ;(eventbox 
    ;:onhover "${eww} update br_reveal=true" 
    ;:onhoverlost "${eww} update br_reveal=false"
    ;(box 
      ;:class "module-2" 
      ;:space-evenly "false"
      ;:orientation "h"
      ;:spacing "3"
      ;(label 
        ;:text ""
        ;:class "bright_icon" 
        ;:tooltip "brightness")
      ;(revealer
        ;:transition "slideleft"
        ;:reveal br_reveal
        ;:duration "350ms"
        ;(scale 
          ;:class "brightbar"
          ;:value brightness_percent
          ;:orientation "h"
          ;:tooltip "${brightness_percent}%"
          ;:max 100
          ;:min 0
          ;:onchange "brightnessctl -d amdgpu_bl2 s {}%")
        ;)
      ;)
    ;)
  ;)

(defwidget wifi []
  (eventbox
    :onhover "${eww} update wifi_rev=true"
    :onhoverlost "${eww} update wifi_rev=false"
    (box 
      :vexpand "false" 
      :hexpand "false"
      :space-evenly: "false"
      (button
        :class "module-wif" 
        :onclick "$HOME/.config/eww/scripts/pop ip_menu"
        :wrap "false" 
        :limit-width 12
        :tooltip "${ESSID_WLAN}"
        :style "color: ${COL_WLAN};" WLAN_ICON)
        
      ;(revealer
        ;:transition "slideright"
        ;:reveal wifi_rev
        ;:duration "350ms"
        ;(label 
          ;:class "ip_addr"
          ;:text IP_ADDR
          ;:orientation "h"
        ;)
      ;)
    )
  )
)

(defwidget bluetooth []
  (box 
    :vexpand "false"
    :hexpand "false"
    :space-evenly "false"
    (button
      :class "module-bluetooth"
      :onclick "rfkill toggle bluetooth"
      :onrightclick "blueberry"
      :tooltip "Bluetooth is ${BLUE_STATUS}"
      ""
    )
  )
)

;; The widget that holds all the stuff in the right third of the top bar
(defwidget right []
  (box :orientation "h"
    :halign "end"
    :class "right_modules"
    :space-evenly false
    ;(ip_addr)
    ;(sep)
    (wifi)
    (bluetooth)
    ;(wifi)
    (sep)
    (bright)
    (volume)
    (sep)
    (memory)
    ;(label :text "${battery}%")
    (battery)
    (sep)
    (start)
  )
)

(defwidget left []
  (box :oriention "h"
    :halign "start"
    :class "left_modules"
    :space-evenly false
    (focus_workspace)
    ;(label :class "separ" :text "<")
    (sep)
    (active_workspaces)
    ;(label: :class "separ" :text ">")
  )
)


;; --- workspaces widget ---
; this is my implementation
(defwidget focus_workspace []
  (box 
    :class "focus_workspace"
    :space-evenly true
    (label :text "")
    (label :text "${focused_workspace}")
  )
)

(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")

(defwidget active_workspaces []
  (box
    :space-evenly true 
    (for workspace in act_workspaces 
      (eventbox :class "act_workspace" :onclick "hyprctl dispatch workspace ${workspace.key}"
        (box :class "act_workspace"
          (label :text "${workspace.key}")
        )
      )

    )
  )
)

(defwidget system []
  (box 
    :class "sys_win" 
    :orientation "v"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    :spacing 0
    (box 
      :class "sys   (wifi_bat_box" 
      :orientation "h"
      :space-evenly "false"
      (circular-progress
        :value battery
        :class "sys_bat"
        :thickness 9 
        (label
          :text ""
          :class "sys_icon_bat"
          :limit-width 2 
          :show_truncated false
          :wrap false
        )
      )
      (box 
        :orientation "v"
        :space-evenly "false"
        :hexpand "false"
        :vexpand "false"
        (label
          :text "battery"
          :halign "start"
          :class "sys_text_bat_sub"
          :limit-width 9 
          :show_truncated false
          :wrap false
        )
        (label
          :text "${battery}%"
          :halign "start"
          :class "sys_text_bat_sub"
          :limit-width 22
          :show_truncated false
          :wrap false
          )
        (label 
          :text "${battery_status}"
          :halign "start"
          :class "sys_text_bat_sub"
          :limit-width 22
          :show_truncated false
          :wrap false
        )
      )
    )
  )
)

(defwidget ip_menu [] 
  (box
    :class "ip_win"
    :orientation "v"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    (label
      :text "${ESSID_WLAN}: ${IP_ADDR}"
      :halign "start"
      :class "ip_wifi_label"
      ;:limit-width 22 
      :show_truncated false
      :wrap false
    )
    (label
      :text "OpenVPN: ${TUN_IP_ADDR}"
      :halign "start"
      :class "ip_wifi_label"
      :show_truncated false
      :wrap false
    )
  )
)

(defwidget slider_menu []
  (box 
    :class "slider_win"
    :orientation "v"
    ;:space-evenly "false"
    ;(label :text "test")
    (box
      :class "vol_slider"
      :space-evenly "false"
      (label
        :text ""
        :class "vol_menu_icon"
       )
      (scale 
        :class "volbar"
        :value volume_percent
        :orientation "h"
        :tooltip "${volume_percent}%"
        :max 100
        :min 0
        :onchange "amixer -D pulse sset Master {}%"
        ;:flipped "true"
      )
    )
      (box
        :class "br_slider"
        :space-evenly "false"
        ;:orientation "h"
        (label 
          :text ""
          :class "bright_menu_icon"
          )
        (scale 
          :class "brightbar"
          :value brightness_percent
          :orientation "h"
          :tooltip "${brightness_percent}%"
          :max 100
          :min 0
          :onchange "brightnessctl -d amdgpu_bl2 s {}%")
      )
    
  )
)

(defwidget power_menu []
  (box
    :orientation "v"
    :class "power_win"
    ;:space-evenly "false"
    (box
      :orientation "h"
      :space-evenly "false"
      (button
        :class "power_icon"
        :onclick "poweroff"
        "")
      (label :text "Leave Dungeon?" :class "power_txt")
    )
  )
)

(defwidget audio_menu []
  (box
    :oriention "h"
    :class "audio_win"
    (box
      :class "album_art"
      ;(label :text "test")
      :style "background-image: url('${ALBUM_COVER}');"
      )
    (box
      :oriention "v"
      (box "${SONG_TITLE}")
      (box "${ALBUM_TITLE}")
    )
    )
  )

; below is pulled from hyprland docs
;; listeners
;(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
;(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")

;; actual widget
;(defwidget workspaces []
  ;(eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    ;(box :space-evenly false
       ;  :class "workspaces"
      ;(label :text "${workspaces}${current_workspace}" :visible false)
      ;(for workspace in workspaces
       ; (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
        ;  (box :class "workspace-entry ${workspace.windows > 0 ? "occupied" : "empty"}"
         ;   (label :text "${workspace.id}" :class "workspace-bx-${workspace.id == current_workspace ? "current" : "test"}" )
          ;  )
          ;)
        ;)
      ;)
    ;)
  ;)
